---
title: "เริ่มต้น"
---
```{r message=FALSE, warning=FALSE, include=FALSE}
# install.packages("pacman)
pacman::p_load(knitr, quarto, tidyverse, gganimate, kableExtra)
```
## วิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์ (Interactive data analysis)

### ทำไม

- จุดประสงค์ของการทำ data visualisation คืออะไร
    - แรงบันดาลใจ กระตุ้นความสนใจ
    - อธิบายข้อมูล
    - วิเคราะห์
- การวิเคราะห์ข้อมูลช่วยให้เราเข้าใจปัญหา สถานะการณ์ที่มันซับซ้อนได้ดียิ่งขึ้น
    - ยิ่งเราเข้าใจปัญหาดีขึ้น ก็ยิ่งเพิ่มโอกาสที่เราจะหาทางออกหรือแก้ปัญหาได้มากขึ้น
    ![ความสัมพันธ์ระหว่าง แบบจำลอง/ข้อมูล ความเป็นจริง และมนุษย์](img/diagram-model.png){#fig-diagram-model-data}

### วิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์มีกระบวนการอย่างไร

![กระบวนการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์](img/diagram-analysis.png)


### ขั้นตอนการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์

- *นิยามปัญหา*: ปัญหาหรือเป้าหมายที่เราต้องการจะแก้ด้วยการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์คืออะไร
- *ตั้งคำถาม*: ตั้งชุดคำถามจากปัญหาที่สนใจ
- *รวบรวม เปลี่ยนแปลง ทำความคุ้นเคยกับข้อมูล*: เตรียมข้อมูลให้พร้อมสำหรับการวิเคราะห์ที่ต้องการ
- *สร้างแบบจำลอง*: พยายามใช้สถิติหรือเทคนิคทางmachine learning สร้างแบบจำลอง สรุป หรือวิเคราะห์ข้อมูล
- *นำเสนอข้อมูลหรือแบบจำลอง*: สรุปผลที่ได้และนำเสนอในรูปแแบที่เข้าใจได้ง่าย
- *แปลผล*: ทำความเข้าใจกับผลที่ได้ ขั้นตอนนี้สำคัญ
- *สรุปผลและตั้งคำถามกับผลที่ได้*: ตั้งคำถามและถามกลับจากผลที่ได้เพื่อให้ได้ข้อสรุปหรือเข้าใจปัญหามากขึ้น

### สิ่งสำคัญในการวิเคราะห์ข้อมูลและปฏิสัมพันธ์
- กระบวนการนี้ไม่เป็นลำดับ แต่เป็นกระบวนการที่วนกลับมาซ้ำอยู่เสมอ (กระโดดไปมาระหว่างขั้นตอน)
- บางกิจกรรมเป็นเอกลักษณ์ของมนุษย์เท่านั้น เช่น กำหนดปัญหา สร้างคำถาม เป็นต้น
- การแสดงผลเป็นส่วนเล็กน้อยของกระบวนการและประสิทธิภาพขึ้นอยู่กับขั้นตอนอื่น ๆ
- ปฏิสัมพันธ์: ทุกครั้งที่คุณบอกให้คอมพิวเตอร์ทำอะไร (และส่งข้อมูลกลับมา)
    - รวบรวมและแปลงข้อมูล
    - ระบุโมเดลและ/หรือคำค้นจากข้อมูล
    - ระบุวิธีการแสดงผล (และโมเดล)
    - เรียกดูผลลัพธ์
    - สังเคราะห์และสื่อสารข้อมูลที่รวบรวมได้
- ปฏิสัมพันธ์โดยตรงกับการจัดการเชิงตรงกับการป้อนคำสั่ง: อินเตอร์เฟซ WIMP (การจัดการโดยตรงผ่านการคลิก หน้าต่างของโปรแกรม ไอคอน เมนู  ฯลฯ) เป็นการปฏิสัมพันธ์ แต่เช่นเดียวกับการป้อนคำสั่งผ่านบรรทัดคำสั่ง
    - คุณสามารถให้ผู้ใช้พิมพ์ได้!
- กลุ่มเป้าหมาย: ทักษะและความรู้พื้นฐานของพวกเขาคืออะไร? (ความรู้ด้านโดเมน สถิติ กราฟ)


### ความท้าทายของการวิเคราะห์ข้อมูลแบบสัมพันธ์แบบมุ่งเน้นการแสดงผล
- การกำหนดรายละเอียด (ความคิด → ข้อมูล/โมเดล): จำเป็นต้องแปลงคำถามและความคิดของเราให้สามารถอ่านได้เป็นข้อมูลที่คอมพิวเตอร์สามารถอ่านได้
    - Shiny ช่วยให้ผู้ที่ไม่ใช่โปรแกรมเมอร์สามารถทำการวิเคราะห์ข้อมูลได้ แต่ต้องมีความรู้ด้าน R เพื่อสร้างแอป
    - แต่ยังมีเครื่องมือที่ง่ายกว่านี้อีกเช่นกัน
- การแสดงผล (ข้อมูล/โมเดล → สายตา)
    - ขั้นตอนถัดไปคือการค้นหาการแสดงผล (แสดงผลแบบสายตา) เพื่อให้ผู้ใช้สามารถตรวจสอบและเข้าใจได้
    - "การตัดสินใจว่าจะแสดงผลอะไรเป็นเรื่องที่สำคัญเช่นเดียวกับการตัดสินใจว่าจะแสดงผลอย่างไร"
    - "ความสวยงามของการแสดงผลจำเป็นต้องมีในระดับใดเพื่อที่จะเป็นประโยชน์สำหรับการวิเคราะห์ข้อมูล?"
        - "ปัญหาการแสดงผลส่วนใหญ่สามารถแก้ไขได้ด้วยกราฟเพียงไม่กี่รูป"
    - มีความยากที่จะใช้งาน ปรับแต่ง และผสมผสานกราฟอย่างชาญฉลาด/มีประสิทธิภาพ/นวัตกรรม
- การตีความ (สายตา → ความคิด)
    - "สิ่งที่คนต้องรู้ในการคิดอย่างมีประสิทธิภาพเกี่ยวกับผลลัพธ์ของการสร้างโมเดลและการแสดงผล"
    - "คนสามารถตีความและเชื่อใจในแอป shiny ของคุณได้หรือไม่?"

## ทำไมต้องแสดงผล

### กราฟทั้งสี่ของอันสคอมบี

อันสคอมบ์(F. J. Anscombe) ได้เขียนบทหนึ่งความลงในวารนักสถิติอเมริกัน(https://www.jstor.org/stable/2682899) ที่แสดงให้เห็นความสัมคัญของการวาดกราฟหรือการแสดงผลข้อมูลในการวิเคราะห์เชิงสถิติ

* @tbl-regression-anscombe ผลลัพธ์จากการทำ linear regression กับข้อมูลของอันสคอมบ์
	- คำถาม: เราพบอะไร
```{r tbl-regression-anscombe, echo=FALSE, results = "asis"}
#| label: tbl-regression-anscombe
#| tbl-cap: "โมเดลเชิงเส้นจากกราฟทั้งสี่ของอันสคอมบ์"

fit1 <- lm(y1 ~ x1, data = anscombe)
fit2 <- lm(y2 ~ x2, data = anscombe)
fit3 <- lm(y3 ~ x3, data = anscombe)
fit4 <- lm(y4 ~ x4, data = anscombe)


models <- list("y1 (Set 1)" = fit1,"y2 (Set 2)" = fit2, "y3 (Set 3)" = fit3, "y4 (Set 4)" = fit4)
options(warn = -1)
library(gt)
library(gtsummary)
library(modelsummary)
# additionally we want to change the font, font size and spacing
modelsummary(models,
output = 'gt',
notes = "Notes: ...",
gof_map = NA)

```

### ### กราฟทั้งสี่ของอันสคอมบ์ (2)
* @tbl-anscombe ข้อมูลทั้ง 4 ของอันสคอมบ์ [@Anscombe1973-xv]
	- Q: ข้อมูลแสดงอะไร อ่านเข้าใจง่ายหรือไม่
```{r tbl-anscombe, echo=FALSE, echo=FALSE, out.width = '100%'}
options(warn = -1)
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
#| label: tbl-anscombe
#| tbl-cap: "Anscombe's quartett: Visualization"
anscombe_table <- anscombe %>% select(x1, y1, x2, y2, x3, y3, x4, y4)
kable(anscombe_table, format = "html", table.attr = "style='width:95%;margin: auto;'",
      caption = "Anscombe's quartet data") %>%
  kable_styling(full_width = F) %>%
  column_spec(1, color = "red") %>%
  column_spec(2, color = "red") %>%
  column_spec(3, color = "blue") %>%
  column_spec(4, color = "blue") %>%
  column_spec(5, color = "darkgreen") %>%
  column_spec(6, color = "darkgreen") %>%
  column_spec(7, color = "orange") %>%
  column_spec(8, color = "orange")
```
 
### กราฟทั้ง 4 ของอันสคอมบ์ (3)

* @fig-anscombe นำเสนอข้อมูลในรูปแบบกราฟ
    + Q: *เราเห็นอะไรจากการนำเสนอนี้*
```{r fig-anscombe, echo=FALSE, echo=FALSE, out.width = '100%'}
#| label: fig-anscombe
#| fig-cap: "Anscombe's quartet: Visualization"

anscombe_m <- data.frame()

for(i in 1:4)
  anscombe_m <- rbind(anscombe_m, data.frame(set=i, x=anscombe[,i], y=anscombe[,i+4]))

ggplot(anscombe_m, aes(x, y)) + 
    geom_point(size=3, color="black", fill="black", shape=21) + 
    geom_smooth(method="lm", fill=NA, fullrange=TRUE) + 
    facet_wrap(~set, ncol=2) +
    theme_light()
```
 
### The Datasaurus Dozen

* @fig-datasaurus-own ภาพเคลื่อนไหวของ the datasaurus dozen โดย [Tom Westlake](https://github.com/thomasp85/gganimate/wiki/The-Datasaurus-Dozen) (see [here](https://github.com/thomasp85/gganimate/wiki/The-Datasaurus-Dozen), ต้นแบบมาจาก [Alberto Cairo](http://www.thefunctionalart.com/2016/08/download-datasaurus-never-trust-summary.html))
    + Q: *เราเห็นอะไรจากการนำเสนอนี้*

```{r fig-datasaurus, eval=FALSE, fig.cap="The Datasaurus Dozen animated by Tom Westlake", include=FALSE, out.width="100%"}
#| label: fig-datasaurus
#| fig-cap: "The Datasaurus Dozen โดย Tom Westlake"
knitr::include_graphics("data/Datasaurus.gif")
```

```{r fig-datasaurus-own, echo=FALSE, warning=FALSE, out.width="100%"}
#| label: fig-datasaurus-own
#| fig-cap: "The Datasaurus Dozen โดย Tom Westlake"
options(warn = -1)
library(gifski)
library(png)
library(datasauRus)
library(ggplot2)
library(gganimate)
library(dplyr)

datasaurus_dozen <- datasaurus_dozen %>% 
  group_by(dataset) %>%           
  mutate(mean.x = round(mean(x), 3),
         mean.y = round(mean(y),3),
         sd.x = round(sd(x), 3),
         sd.y = round(sd(y),3),
         cor.xy = round(cor(x,y),3)) %>%
  mutate(label = paste("Dataset: ", dataset, "\n",
                       "mean(x): ", mean.x, "\n",
                       "mean(y): ", mean.y, "\n",
                       "sd(y): ", sd.y, "\n",
                       "sd(x): ", sd.x, "\n",
                       "cor(x,y): ", cor.xy, sep=""))
           


ggplot(datasaurus_dozen, aes(x=x, y=y))+
  geom_point()+
  theme_minimal() +
  geom_text(x = 90, y = 85, aes(label = label)) +
  #geom_text(x = 80, y = 95, label=as.character(round(mean(~x),2))) +
  transition_states(dataset, 3, 1) + 
  ease_aes('cubic-in-out')
```



### การนำเสนอข้อมูลแบบมีปฏิสัมพันธ์

- "**การนำเสนอข้อมูลแบบมีปฏิสัมพันธ์(interactive data visualization)** ทำให้เราสามารถปรับเปลี่ยนรูปแบบหรือองค์ประกอบของกราฟหรือเชื่อมโยงกับการนำอื่นๆได้โดยตรง" [@Swayne1999-wf] ([Wikipedia](https://en.wikipedia.org/wiki/Interactive_data_visualization))
- การมีปฏิสัมพันธ์กับข้อมูลนี้ทำให้เราเข้าใจข้อมูลได้มากขึ้น [cf. @Cleveland1984-fy]
- ระบบการนำเสนอข้อมูลเราพัฒนากันมาไกล อยากให้ลองดูโปรแกรมยุคแรกอย่าง PRIM-9 (1974) ดูครับ [@Friendly2006-aq, 23, see also Cleveland and McGill,
1988, Young et al. 2006]
  - เราพัฒนากันมาไกล... [John Tukey on prim9](https://youtu.be/B7XoW2qiFUA?t=151)
* การมีปฏิสัมพันธ์กับข้อมูลทำให้เรา...
    + ...เข้าใจข้อมูลได้มากขึ้น (ในหลายมิติ)
    + ...หาความสัมพันธ์ของข้อมูลได้ง่าย
    + ...เข้าถึงข้อมูลได้ง่ายขึ้น โดยไม่จำเป็นต้องมีพื้นฐาน
    + ...สร้าง'เอกสาร'ที่มีปฏิสัมพันธ์กับคนอ่านได้



## Shiny

### Shiny คืออะไร?

Shiny คือ **web application framework** อันหนึ่งสำหรับภาษา R ที่เราสามารถเปลี่ยนรูปแบบการวิเคราะห์ไปอยู่ในรูปแบบ interactive web applications  อืมมมม มันหมายความว่ายังไง?

* ตัวหน้าตาของมันก็คือ **webpage**
* ใน webpage นี้เราสามารถมีปฏิสัมพันธ์กับกับส่วนต่างๆที่ปรากฏหน้านั้นได้ (เราเรียกหน้าwebpageนี้ user interface)
* โดยข้างหลังของ webpage นี้ก็คือคอมพิวเตอร์ของเรานี่เอง (หรือที่บางทีเรียกว่า **server**)
* ตัวserver นี้จะทำการรัน code R ที่เราเขียนสำหรับ webapp นี้
* เมื่อเราเปลี่ยนค่าinputsอะไรบางอย่างบน webapp ข้อมูลการปรับเปลี่ยนนี้จะถูกส่งไปที่คอมพิวเตอร์หรือserver
* คอมพิวเตอร์ก็จะทำการรัน code R ของเราใหม่โดยใช้ค่าที่เรา **inputs** ใหม่ (**input functions**)
* หลังจากนั้นคอมพิวเตอร์ก็จะส่ง **outputs** ใหม่กลับมาที่หน้า webpage  (**output functions**)
* ประวัติของ Shiny: [Joe Cheng: The Past and Future of Shiny](https://www.youtube.com/watch?v=HpqLXB_TnpI)^[Joe Cheng is the Chief Technology Officer at RStudio and was the original creator of the Shiny web framework, and continues to work on packages at the intersection of R and the web.]
- **Popularity**: Shiny <img src="https://cranlogs.r-pkg.org/badges/shiny" alt="">
  - Comparison: Ggplot2 <img src="https://cranlogs.r-pkg.org/badges/ggplot2" alt="">, dplyr <img src="https://cranlogs.r-pkg.org/badges/dplyr" alt="">



### ข้อดีและข้อเสียของ Shiny
#### ข้อดี R Shiny:

1. **สร้างตัวต้นแบบได้เร็ว**: Shiny เป็นรูปแบบคำสั่งที่ใช้ง่ายและทำให้สามารถเปลี่ยนจากต้นแบบเป็นweb application ได้รวดเร็ว
2. **การมีปฏิสัมพันธ์**: Shiny ช่วยให้เราสร้าง interactive web apps ได้สะดวก
3. **เป็นส่วนหนึ่งของ R Ecosystem**: Shiny ถูกรวมเป็นส่วนหนึ่งของ R's **vast open-source ecosystem** (มี package R สำหรับงานด้านต่าง ๆ เยอะมาก สำหรับภาษา python ก็มี [shiny for python](https://shiny.posit.co/py/))
5. **แบบจำลองทางสถิติ และการนำเสนอ**: เราสามารถที่จะประยุกต์ใช้แบบจำลองสถิติและนำเสนอผลลัพธ์ได้ใน webapp ได้ผ่าน Shiny
6. **ไม่จำเป็นต้องมีทักษะด้านการพัฒนาweb application**: With Shiny, you can create web apps using R code alone. Knowledge of HTML, CSS, or JavaScript is not necessary but can help
7. **Reactivity**: Shiny มีระบบโต้ตอบที่ยอดเยี่ยม 
8. **การเผยแพร่และตีพิมพ์**: เราสามารถที่จะเผยแพร่ apps ที่สร้างด้วย Shiny ได้สะดวก ไม่ว่าจะเป็นผ่านหลายช่องทางไม่ว่าจะเป็น RStudio's Shiny server, Shinyapps.io, หรือใส่ไว้ในเอกสาร R Markdown documents หรือ websites

#### ข้อเสีบของ Shiny:

1. **ประสิทธิภาพ**: Shiny apps รันโดยอาศัยภาษา R ซึ่งเป็นภาษาแบบ interpreted language ฉะนั้นจะมีปัญหาเรื่องความรวดเร็วให้การประมวณผลข้อมูลหรือคำสั่งที่มีปริมาณมาก
2. **Single-threaded**: ภาษา R (และส่วนขยายอย่าง Shiny) เป็นการประมวณผลแบบ single-threaded จะมีปัญหากับการประมวณผลที่ต้องรับ inputs มากจากหลายผู้ใช้ในเวลาเดียวกัน (ดูเพิ่มเติมที่ [here](https://shiny.posit.co/r/articles/improve/scaling-and-tuning/)).
3. **ความซับซ้อน**: ถึงแม้ Shiny จะง่ายที่จะเรียนรู้แต่ก็เป็นอะไรที่ท้าทายในส่วนของการออกแบบในส่วนของการโต้ตอบ
4. **ข้อจำกัดการดัดแปลง**: มันง่ายที่จะสร้าง apps ด้วย Shiny แต่การปรับปรุงเปลี่ยนแปลงในส่วนของ user interface ก็ยังเป็นส่วนที่ท้าทายเพราะต้องอาศัยภาษาอื่น ๆ อย่าง JavaScript,CSS หรือแม้ package อื่น ๆ ช่วย
5. **การบันทึกและเก็บรวบรวมข้อมูล**: การบันทึกและเก็บรวบรวมข้อมูลในรูปแบบฐานข้อมูลยังดูยุ่งยากสำหรับ Shiny 
6. **ค่าบำรุงรักษา**: ค่าบำรุงรักษา Shiny apps ในระยะยาวยังดูสูงเพราะต้องอาศัยผู้เชี่ยวชาญเฉพาะด้าน
7. **Software Dependencies**: การจัดการพวก dependencies หรือพวกlibrary 
ที่ Shiny app ของเราใช้งานเป็นอะไที่ยังดูยุ่งยากและอาจทำให้เกิดปัญหาได้



## The Guerry Dashboard: The app we will build
- ใน workshop นี้เราจะมาสร้าง Shiny app @fig-guerrydashboard ด้วยกัน ลองดุ [app นี้](https://slphyx.shinyapps.io/guerry/) (5-10 นาที) และตอบคำถาม:
  - คำถามอะไรที่เราสามารถตอบได้โดยอาศัย app นี้
  - app นี้ช่วยให้เราเข้าใจและวิเคราะห์ข้อมูลในappได้อย่างไร
  - ใน app นี้มีองค์ประกอบสำหรับการมีปฏิสัมพันธ์อะไรบ้าง

![(Source: Original image)](resources/02-guerrydashboardx.png){#fig-guerrydashboard}


### Data
* ในappนี้เราจะวิเคราะห์ "Guerry data"
* `?Guerry`: ข้อมูลจาก A.-M. Guerry, "Essay on the Moral Statistics of France"
  - `Guerry::gfrance85` ประกอบด้วยแผนที่ฝรั่งเศสในปี ค.ศ. 1830 + Guerry data, ไม่รวม Corsica (@tbl-guerry แสดงส่วนย่อย)

```{r message=FALSE, warning=FALSE, include=FALSE}
#| label: tbl-guerry
#| tbl-cap: Guerry dataset (subset of columns)
#| code-fold: true
#| code-summary: Data preparation code of the app

library(shiny)
library(htmltools)
library(bs4Dash)
library(fresh)
library(waiter)
library(shinyWidgets)
library(Guerry)
library(sf)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(viridis)
library(leaflet)
library(plotly)
library(jsonlite)
library(ggplot2)
library(GGally)
library(datawizard)
library(parameters)
library(performance)
library(ggdark)
library(modelsummary)

# 1 Data preparation ----

## Load & clean data ----
variable_names <- list(
  Crime_pers = "Crime against persons",  
  Crime_prop =  "Crime against property",  
  Literacy = "Literacy",  
  Donations = "Donations to the poor",  
  Infants = "Illegitimate births",  
  Suicides = "Suicides",  
  Wealth = "Tax / capita",  
  Commerce = "Commerce & Industry",  
  Clergy = "Clergy",  
  Crime_parents = "Crime against parents",  
  Infanticide = "Infanticides",  
  Donation_clergy = "Donations to the clergy",  
  Lottery = "Wager on Royal Lottery",  
  Desertion = "Military desertion",  
  Instruction = "Instruction",  
  Prostitutes = "Prostitutes",  
  Distance = "Distance to paris",  
  Area = "Area",  
  Pop1831 = "Population"
)


# Import the 'gfrance85' data from the 'Guerry' package
data_guerry <- Guerry::gfrance85 %>%
  st_as_sf() %>% # Convert to a Simple Features (sf) object
  as_tibble() %>%  # Convert to a 'tibble'
  st_as_sf(crs = 27572) %>% # set the Coordinate Reference to 27572 System (CRS)
  mutate(Region = case_match( # Create new region column
    Region,
    "C" ~ "Central",
    "E" ~ "East",
    "N" ~ "North",
    "S" ~ "South",
    "W" ~ "West"
  )) %>%
  select(-c("COUNT", "dept", "AVE_ID_GEO", "CODE_DEPT")) %>% # drop columns
  select(Region:Department, where(is.numeric)) # select columns



kable(head(data_guerry[c(1,2,3,4,21,22)]))
```

- ข้อมูลจะแบ่งเป็น `85` departments (`N = 85`)
  - ซึ่งตอนหลังเรารวมเป็นพื้นที่
- `geometry`: ตัวแปรที่อธิบายรูปร่างของพื้นที่ `regions` (บางที่เราก็ออกตัวแปรนี้ออก)
- **Advantages**: ข้อมูลนี้น่าสนใจ เพราะมันมีแผนที่และข้อมูลซึ่งพร้อมใช้งานใน R 


### ส่วนประกอบของ Shiny app
* จากภาพ @fig-shinycomponents, Shiny app ประกอบด้วย **2 ส่วน**, คือ **user interface (UI)** กับ **server**, ที่ส่งผ่านเป็นตัวแปรหนึ่งใน `shinyApp()` ซึ่งเป็นตัวสร้าง Shiny app จากคู่ **ui/server**

![Source: https://hosting.analythium.io/the-anatomy-of-a-shiny-application/ (c) Analythium](resources/02-compontents-shiny-app.png){#fig-shinycomponents}



### Shiny app อันแรก
* ด้านล่างนี้เราจะสร้าง app อันแรกกัน และจะอาศัยโอกาสนี้อธิบายส่วนประกอบพื้นฐานของ Shiny app (ตัวอย่าง [here](https://mastering-shiny.org/basic-app.html#basic-app)).

1. ติดตั้ง packages ที่เกี่ยวข้อง:

```{r, cache=TRUE, eval=FALSE, include=TRUE}
install.packages("shiny")
install.packages("tidyverse")
# Guerry package is already installed
```

2. สร้าง folder ชื่อ "myfirstapp" ใน [working directory](https://bookdown.org/ndphillips/YaRrr/the-working-directory.html).
3. สร้าง script file ใน Rstudio และ save ใน working directory ด้วยชื่อ `app.R`.
4. Copy code ด้านล่างนี้และวางใน `app.R` 

```{r eval=FALSE, file="shinyapps/guerry/states_paul/app_tab_tabulate.R"}
#| code-fold: true
#| code-summary: Code of the tabulate tab subset of the app

```


5. เราสามารถที่จะรันหรือหยุด app โดยการคลิ็กปุ่ม **Run App** (@fig-runappbutton) 

```{r run-app, out.width = NULL, echo = FALSE}
#| label: fig-runappbutton
#| fig-cap: " The Run App button can be found at the top-right of the source pane."
knitr::include_graphics("resources/02-run-app.png")
```



## Minimum viable product (MVP)
* ...คอนเซ็ปการสร้าง app แบบ MVP (@fig-mvp)!

```{r run-app, out.width = NULL, echo = FALSE}
#| label: fig-mvp
#| fig-cap: "Illustration of MVP (Source: Fay et al. 2021 - [read description](https://engineering-shiny.org/building-ispum-app.html))"
knitr::include_graphics("resources/MVP.png")
```

* "**version** [...]  **เพียงพอที่จะใช้งาน** โดยลูกค้า" แล้วเก็บรวบรวมคำติชม ([Wikipedia](https://en.wikipedia.org/wiki/Minimum_viable_product))
* "ทำให้มันทำงานได้ในระดับเล็กก่อน ซึ่งมันทำให้ง่ายในการปรับปรุงเปลี่ยนแปลงต่อไป" (Fay et al. 2021)
* **ทำหน้าตาก่อน (UI)"**: ทางปลอดภัยที่สุด (Fay et al. 2021)
  - **เห็นพร้องกันในส่วนประกอบ**: ช่วยให่ทุกคนที่เกี่ยวข้องเห็นด้วยกับคุณสมบัติต่างๆของ app ที่ควรมีหลังจากที่ UI เริ่มทำขึ้นมาแล้ว
  - **ทำงานให้เป็นระเบียบ**: "มันง่ายที่เราจะทำในส่วนเล็กๆและรู้ว่ามันทำงานยังไงก่อนที่จะรวมเข้ากับระบบใหญ่"
  - และ...
- ..เราก็ทำตามแนวทางนี้ คือค่อยสร้างความซับสน ซับซ้อนอย่างเป็นระบบ 



## ขั้นตอนการทำงาน: พัฒนา, แก้ปัญหา และหาความช่วยเหลือ
- ดูขั้นตอนใน @wickham2021mastering [Ch. 5, 20.2.1]
- สามขั้นตอนสำหรับ Shiny :
  - **พัฒนาพื้นฐาน**  วงรอบของการสร้างapp เปลี่ยนแปลง และทดสอบผลลัพธ์
  - **แก้ปัญหา**, หาว่า code หรือวิธีการของเราผิดตรงไหน อย่างไร
  - **เขียนอธิบาย**, พยายามเขียนอธิบายว่าเราคิดหรือทำอะไรใน code เพื่อที่คนอื่นจะได้มาช่วยเหลือแก้ไข codeได้


### ขั้นตอนในการพัฒนา
1. **การสร้างapp**: เริ่มเขียน app โดยอาศัย code R ด้านล่างนี้ (`Shift + Tab` หรือเลือก `New Project -> Shiny Web Application`)
2. **ดูที่เราเปลี่ยน**: 
  1. เขียน code^[**ทดสอบอัตโนมัติ**]
  2. รันapp `Cmd/Ctrl + Shift + Enter`.
  3. ทดลอง app ด้วยการเปลี่ยนค่าต่างๆ
  4. ปิดapp
  5. เริ่มข้อ 1 ใหม่

```{r cache=FALSE}
library(shiny)
ui <- fluidPage(
  
)
server <- function(input, output, session) {
  
}
shinyApp(ui, server)
```

#### tips 
- **ควบคุมการแสดงผล**: โดยเริ่มต้นทุกครั้งที่รันapp ในRstudio มันจะ pop-out เป็นอีกหน้าต่างใหม่ แต่เราก็สามารถที่จะให้มันแสดง  `Run in Viewer Pane` กับ `Run External`ได้
- **outline เอกสารหรือcode**: `Cntrl + Shift + O`
- **ลองดูว่าcodeทำงานยังไง**: ด้วยการลบที่ไม่ต้องการทิ้งช้าๆ
  - รันappดูว่ามันจะยังทำงานอยู่ไหม
  - ถ้าสนใจเฉพาะส่วน UI ก็เหลือส่วนserverไว้แค่  `server <- function(input, output, session) {}`



### ขั้นตอนแก้ปัญหา 
* ส่วนใหญ่มีสาเหตุมาจากที่ Shiny ไม่เข้าใจว่าเราต้องการอะไรและเราไม่รู้ว่าเขียนยัง 
* เราต้องพัฒนาขั้นตอนเพื่อที่จะแก้ปัญหานี้อย่างมีปะสิธิภาพ
* แนะนำให้ดูที่ @wickham2021mastering [Ch. 5.2, [link](https://mastering-shiny.org/action-workflow.html#debugging)] 


